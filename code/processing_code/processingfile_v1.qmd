---
title: "Data Pre-Processing/Cleaning Script"
author: "Andreas Handel"
date: "2023-01-03"
output: html_document
---

# Load Libraries
```{r}
# General Pre-Processing
library(tidyverse)
library(dplyr)
library(stringr)

# Data Structure Visualization
library(skimr)

# Setting Paths
library(here)

# Information About NAs
library(dlookr)
```


# Loading Data

```{r}
# Path to Data
data_location <- here("data","raw_data","foodborne_outbreaks.csv")
training_data <- read_csv(data_location)

data_location <- here(
  "data","raw_data","NationalOutbreakPublicDataTool.xlsx")
analysis_data <- readxl::read_excel(data_location)
```

# Check Data

There are several ways we can look at the datasets' structures.

## Training Data
```{r}
str(training_data)
summary(training_data)

# Closer Look at Training Data
head(training_data)
skim(training_data)

# Plotting NAs of Training Data
plot_na_pareto(training_data)
```

It appears that the training data contains the following variables:
General
-   Year, Month (Time)
-   State (Location)
-   Food, Ingredient (Vehicle of Transmission)
-   Species
-   Status
Health Outcomes
-   Illnesses
-   Hospitalizations
-   Fatalities

## Analysis Data
```{r}
str(analysis_data)
summary(analysis_data)

# Closer Look at Training Data
head(analysis_data)
skim(analysis_data)

# Plotting NAs of Training Data
plot_na_pareto(analysis_data)
```

It appears that the training data contains the following variables:
General
-   Year, Month (Time)
-   State (Location)
-   Primary Mode (Vehicle of Transmission)
-   Food Vehicle
-   Food Contaminated Ingredient
-   Water Exposure
-   Water Type
-   Water Status
-   Animal Type
-   Animal Type Specify
-   Etiology
-   Serotype or Genotype
-   Etiology Status
-   Setting
-   IFSAC Category
Health Outcomes
-   Illnesses
-   Hospitalizations
-   Info on Hospitalizations
-   Deaths
-   Info on Deaths

Because the analysis dataset contains more than just foodborne outbreaks, we want to specify it to just foodborne illnesses.

```{r}
# Plot of NAs After Limiting to Analysis Data to Food
plot_na_pareto(analysis_data %>% filter(`Primary Mode` == "Food"))
```
## Checking Etiologies
```{r}
# Training Data
unique(training_data$Status)

# Analysis Data
unique(analysis_data$`Etiology Status`)
```

Given that "Status" and "Etiology Status" refer to laboratory confirmations, we will filter our case definitions to be only laboratory-confirmed pathogens.

# Cleaning

Based on the data inspections completed above, we want to remove "Ingredient" and "Serotype/Genotype" from the training dataset (> 80% data missing), and we want to remove all variables unrelated to foodborne illness for the analysis dataset (ex: animal type, water type, etc.) in addition to columns with many NAs.

## Training Data
```{r}
training_data_fin <- training_data %>%
  select(!c(Ingredient, `Serotype/Genotype`)) %>%
  filter(grepl("Confirmed", Status))
```

## Analysis Data
```{r}
analysis_data_fin <- analysis_data %>%
  select(!c(`Animal Type`, `Animal Type Specify`, 
            `Water Exposure`, `Water Type`, `Water Status`, 
            `Food Contaminated Ingredient`)) %>%
  filter(grepl("Confirmed", `Etiology Status`)) %>%
  filter(`Primary Mode` == "Food")
```

#potential code for EDA

## Data Manipulation
### Separate Rows to Address Coinfections
```{r}
analysis_data_fin <- analysis_data_fin %>%
  separate_rows(Etiology, sep = "; ")
```

### Column for Type of Pathogen
```{r}
Pathogen_Bacteria <- c("Bacillus", "Brucella", "Campylobacter", "Clostridium", "Staphylococcus", "Escherichia", "Listeria", "Salmonella", "Vibrio", "Cholera", "Enterococcus", "Bacterium", "Shigella", "Yersinia")
Pathogen_Parasite <- c("Cryptosporidium", "Cyclospora", "Entamoeba", "Giardia", "Parasite", "Toxoplasma", "Trichinella")
Pathogen_Virus <- c("Astrovirus", "Norovirus", "Rotavirus")
Pathogen_Poison <- c("Poison", "Toxin", "Metal")

analysis_data_fin <- analysis_data_fin %>%
  mutate(Pathogen_Type = case_when(
    grepl(paste(Pathogen_Poison, 
                collapse = "|"), Etiology) ~ "Poison",
    grepl(paste(Pathogen_Bacteria, 
                collapse = "|"), Etiology) ~ "Bacteria",
    grepl(paste(Pathogen_Parasite, 
                collapse = "|"), Etiology) ~ "Parasite",
    grepl(paste(Pathogen_Virus, 
                collapse = "|"), Etiology) ~ "Virus"
    )) %>%
  mutate(Simplified_Etiology = case_when(
    Pathogen_Type == "Bacteria" ~ str_extract(Etiology, 
      "Bacillus|Brucella|Campylobacter|Clostridium|Staphylococcus|Escherichia|Listeria|Salmonella|Vibrio|Cholera|Enterococcus|Bacterium|Shigella|Yersinia"),
    Pathogen_Type == "Parasite" ~ str_extract(Etiology, "Cryptosporidium|Cyclospora|Entamoeba|Giardia|Parasite|Toxoplasma|Trichinella"),
    Pathogen_Type == "Virus" ~ str_extract(Etiology, "Astrovirus|Norovirus|Rotavirus"),
    Pathogen_Type == "Poison" ~ str_extract(Etiology, "Poison|Toxin|Heavy")
    )) %>%
      mutate(Simplified_Etiology = case_when(
        Simplified_Etiology == "Escherichia" ~ "E. coli",
        Simplified_Etiology == "Heavy" ~ "Heavy Metals",
        TRUE ~ Simplified_Etiology))
```

### Add Month as Numeric Column
```{r}
training_data_fin <- training_data_fin %>%
  mutate(Numeric_Month = case_when(
    Month == "January" ~ 1,
    Month == "February" ~ 2,
    Month == "March" ~ 3,
    Month == "April" ~ 4,
    Month == "May" ~ 5,
    Month == "June" ~ 6,
    Month == "July" ~ 7,
    Month == "August" ~ 8,
    Month == "September" ~ 9,
    Month == "October" ~ 10,
    Month == "November" ~ 11,
    Month == "December" ~ 12)) %>%
  relocate(Numeric_Month, .after = Month)
```


```{r}
rawdata1%>%filter(grepl("Confirmed", Status))
unique(rawdata1$Food)
d2=rawdata1%>%
  filter(!is.na(Food))%>%
  mutate(Food=fct_lump(Food,10))%>%
  count(Food)%>%
  arrange(desc(n))
d2
d3=rawdata1%>%
  filter(!is.na(Species))%>%
  mutate(Food=fct_collapse(Food,Norovirus=c("Norovirus","Norovirus genogroup I","Norovirus genogroup II")))%>%
  mutate(Food=fct_lump(Species,10))%>%
  count(Species)%>%
  arrange(desc(n))
d3
```

All done, data is clean now. 

Let's assign at the end to some final variable, this makes it easier to add further cleaning steps above.

```{r}
processeddata <- d4
```


# Save data 

Finally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. 
This preserves coding like factors, characters, numeric, etc.  If you save as CSV, that information would get lost.
However, CSV is better for sharing with others since it's plain text. If you do CSV, you might want to write down somewhere what each variable is.

See here for some suggestions on how to store your processed data:
http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata

```{r}
save_data_location <- here::here("data","processed_data","processeddata.rds")
saveRDS(processeddata, file = save_data_location)
```



# Notes

Removing anyone who had "faulty" or missing data is one approach. It's often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep individuals with some missing information).

