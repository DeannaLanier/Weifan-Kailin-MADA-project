---
title: "Data Pre-Processing/Cleaning Script"
author: "Andreas Handel"
date: "2023-01-03"
output: html_document
---

<<<<<<< HEAD
install.packages("impute")
# Setup
=======
# Load Libraries
>>>>>>> master
```{r}
# General Pre-Processing
library(tidyverse)
library(dplyr)

# Data Structure Visualization
library(skimr)

# Setting Paths
library(here)

# Information About NAs
library(dlookr)
library(caret)
library(randomForest)
```


# Loading Data

```{r}
# Path to Data
data_location <- here("data","raw_data","foodborne_outbreaks.csv")
training_data <- read_csv(data_location)

data_location <- here(
  "data","raw_data","NationalOutbreakPublicDataTool.xlsx")
analysis_data <- readxl::read_excel(data_location)
```

# Check Data

There are several ways we can look at the datasets' structures.

## Training Data
```{r}
str(training_data)
summary(training_data)

# Closer Look at Training Data
head(training_data)
skim(training_data)

# Plotting NAs of Training Data
plot_na_pareto(training_data)
```

It appears that the training data contains the following variables:
General
-   Year, Month (Time)
-   State (Location)
-   Food, Ingredient (Vehicle of Transmission)
-   Species
-   Status
Health Outcomes
-   Illnesses
-   Hospitalizations
-   Fatalities

## Analysis Data
```{r}
str(analysis_data)
summary(analysis_data)

# Closer Look at Training Data
head(analysis_data)
skim(analysis_data)

# Plotting NAs of Training Data
plot_na_pareto(analysis_data)
```

It appears that the training data contains the following variables:
General
-   Year, Month (Time)
-   State (Location)
-   Primary Mode (Vehicle of Transmission)
-   Food Vehicle
-   Food Contaminated Ingredient
-   Water Exposure
-   Water Type
-   Water Status
-   Animal Type
-   Animal Type Specify
-   Etiology
-   Serotype or Genotype
-   Etiology Status
-   Setting
-   IFSAC Category
Health Outcomes
-   Illnesses
-   Hospitalizations
-   Info on Hospitalizations
-   Deaths
-   Info on Deaths

Because the analysis dataset contains more than just foodborne outbreaks, we want to specify it to just foodborne illnesses.

```{r}
# Plot of NAs After Limiting to Analysis Data to Food
plot_na_pareto(analysis_data %>% filter(`Primary Mode` == "Food"))
```
## Checking Etiologies
```{r}
# Training Data
unique(training_data$Status)

<<<<<<< HEAD
* Year, Month (numeric)
* State, Location (geographic information)
* Food, Ingredient
* Species, Serotype/Genotype
* Status

Following variables are outcomes:
* illnesses
* Hospitalizations
* Fatalities

main outcome: illnesses
=======
# Analysis Data
unique(analysis_data$`Etiology Status`)
```

Given that "Status" and "Etiology Status" refer to laboratory confirmations, we will filter our case definitions to be only laboratory-confirmed pathogens.
>>>>>>> master

# Cleaning

Based on the data inspections completed above, we want to remove "Ingredient" and "Serotype/Genotype" from the training dataset (> 80% data missing), and we want to remove all variables unrelated to foodborne illness for the analysis dataset (ex: animal type, water type, etc.) in addition to columns with many NAs.

## Training Data
```{r}
training_data_fin <- training_data %>%
  select(!c(Ingredient, `Serotype/Genotype`)) %>%
  filter(grepl("Confirmed", Status))
```

## Analysis Data
```{r}
analysis_data_fin <- analysis_data %>%
  select(!c(`Animal Type`, `Animal Type Specify`, 
            `Water Exposure`, `Water Type`, `Water Status`, 
            `Food Contaminated Ingredient`)) %>%
  filter(grepl("Confirmed", `Etiology Status`))
```

<<<<<<< HEAD
First, we will remove the variable "ingredient" and "serotype/genotype" since over 80% of data is missing. 
```{r}
d1=rawdata1%>%
  select(-c(Ingredient,`Serotype/Genotype`))
skim(d1)
```
#checking the levels under each variable
#checking the levels under `Food`
```{r}
skim(d1$Food)
#convert Food to factor
d1$Food=as.factor(d1$Food)
str(d1$Food)
#Since there are over 3000 different levels, we need to combine some food into the same category
d2=
```
#checking the levels under `Species`
```{r}

```
#checking the levels under `Location`
```{r}

```

#potential code for EDA
=======
#potential code for EDA

## Data Manipulation
### Separate Rows to Address Coinfections
```{r}
analysis_data_fin <- analysis_data_fin %>%
  separate_rows(Etiology, sep = "; ")
```

### Column for Type of Pathogen
```{r}
Pathogen_Bacteria <- c("Bacillus", "Brucella", "Campylobacter", "Clostridium", "Staphylococcus", "Escherichia coli", "Listeria", "Salmonella", "Vibrio", "Cholera", "Enterococcus", "Bacterium", "Shigella", "Yersinia")
Pathogen_Parasite <- c("Cryptosporidium", "Cyclospora", "Entamoeba", "Giardia", "Parasite", "Toxoplasma", "Trichinella")
Pathogen_Virus <- c("Atrovirus", "Norovirus", "Rotavirus")
Pathogen_Poison <- c("Poison", "Toxin", "Heavy Metal")

analysis_data_fin %>%
  mutate(Pathogen_Type = case_when(
    grepl(paste(Pathogen_Bacteria, 
                collapse = "|"), Etiology) ~ "Bacteria",
    grepl(paste(Pathogen_Parasite, 
                collapse = "|"), Etiology) ~ "Parasite",
    grepl(paste(Pathogen_Virus, 
                collapse = "|"), Etiology) ~ "Virus",
    grepl(paste(Pathogen_Poison, 
                collapse = "|"), Etiology) ~ "Poison")) %>%
  mutate(Etiology = case_when(
    Pathogen_Type == "Bacteria" ~ which(Etiology %in% )
      
      grepl(paste(Pathogen_Bacteria, collapse = "| "), Etiology)
  ))

```

### Add Month as Numeric Column
```{r}
training_data_fin <- training_data_fin %>%
  mutate(Numeric_Month = case_when(
    Month == "January" ~ 1,
    Month == "February" ~ 2,
    Month == "March" ~ 3,
    Month == "April" ~ 4,
    Month == "May" ~ 5,
    Month == "June" ~ 6,
    Month == "July" ~ 7,
    Month == "August" ~ 8,
    Month == "September" ~ 9,
    Month == "October" ~ 10,
    Month == "November" ~ 11,
    Month == "December" ~ 12)) %>%
  relocate(Numeric_Month, .after = Month)
```


>>>>>>> master
```{r}
rawdata1%>%filter(grepl("Confirmed", Status))
food=rawdata1%>%
  filter(!is.na(Food))%>%
  group_by(Food)%>%
  top_n(n=10)
food
species=rawdata1%>%
  filter(!is.na(Species))%>%
  mutate(Species=fct_collapse(Species,Norovirus=c("Norovirus","Norovirus genogroup I","Norovirus genogroup II","Norovirus unknown")))%>%
  mutate(Species=fct_lump(Species,11,other_level = NA))%>%
  count(Species)%>%
  arrange(desc(n))%>%
  filter(!is.na(Species))
species
```
#predict missing value
```{r}
set.seed(123)
index=createDataPartition(rawdata1$State,p=0.8,list=FALSE)
train=rawdata1[index,]
test=rawdata1[-index,]
model1=randomForest(State~Year+Illnesses+Food,data=train,na.action = na.roughfix)
predicted_states <- predict(model, newdata = test)
actual_states <- test$State
accuracy <- sum(predicted_states == actual_states) / length(actual_states)

<<<<<<< HEAD

```


Now let's look at the `Weight` variable. There is a person with weight of 7000, which is impossible, and one person with missing weight.
To be able to analyze the data, we'll remove those individuals as well.

```{r}
d3 <- d2 %>%  dplyr::filter(Weight != 7000) %>% tidyr::drop_na()
skimr::skim(d3)
```


Now we see that there is another NA, but it's not `NA` from R, instead it was loaded as character and is now considered as a category.
Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Sex, I'm also using droplevels() to get rid of it.

```{r}
d4 <- d3 %>% dplyr::filter(Sex != "NA") %>% droplevels()
skimr::skim(d4)
```


=======
>>>>>>> master
All done, data is clean now. 

Let's assign at the end to some final variable, this makes it easier to add further cleaning steps above.

```{r}
processeddata <- d4
```


# Save data 

Finally, we save the clean data as RDS file. 

```{r}
save_data_location <- here::here("data","processed_data","processeddata1.rds")
saveRDS(processeddata1, file = save_data_location)
```



# Notes

Removing anyone who had "faulty" or missing data is one approach. It's often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep individuals with some missing information).

