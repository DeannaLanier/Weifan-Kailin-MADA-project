---
title: "Data Pre-Processing/Cleaning Script"
author: "Andreas Handel"
date: "2023-01-03"
output: html_document
---
# Load Libraries

```{r}
# General Pre-Processing
library(tidyverse)
library(dplyr)
library(stringr)

# Data Structure Visualization
library(skimr)

# Setting Paths
library(here)

# Information About NAs
library(dlookr)
```

# Loading Data

```{r}
# Path to Data
data_location <- here("data","raw_data","foodborne_outbreaks.csv")
training_data <- read_csv(data_location)

data_location <- here(
  "data","raw_data","NationalOutbreakPublicDataTool.xlsx")
testing_data <- readxl::read_excel(data_location)
```

# Check Data

There are several ways we can look at the datasets' structures.

## Training Data
```{r}
str(training_data)
summary(training_data)

# Closer Look at Training Data
head(training_data)
skim(training_data)

# Plotting NAs of Training Data
plot_na_pareto(training_data)
```

It appears that the training data contains the following variables:
General
-   Year, Month (Time)
-   State (Location)
-   Food, Ingredient (Vehicle of Transmission)
-   Species
-   Status
Health Outcomes
-   Illnesses
-   Hospitalizations
-   Fatalities

## Testing Data
```{r}
str(testing_data)
summary(testing_data)

# Closer Look at Testing Data
head(testing_data)
skim(testing_data)

# Plotting NAs of Training Data
plot_na_pareto(testing_data)
```

It appears that the training data contains the following variables:
General
-   Year, Month (Time)
-   State (Location)
-   Primary Mode (Vehicle of Transmission)
-   Food Vehicle
-   Food Contaminated Ingredient
-   Water Exposure
-   Water Type
-   Water Status
-   Animal Type
-   Animal Type Specify
-   Etiology
-   Serotype or Genotype
-   Etiology Status
-   Setting
-   IFSAC Category
Health Outcomes
-   Illnesses
-   Hospitalizations
-   Info on Hospitalizations
-   Deaths
-   Info on Deaths

Because the testing dataset contains more than just foodborne outbreaks, we want to specify it to just foodborne illnesses.

```{r}
# Plot of NAs After Limiting to Analysis Data to Food
plot_na_pareto(testing_data %>% filter(`Primary Mode` == "Food"))
```

## Checking Etiologies Status
```{r}
# Training Data
unique(training_data$Status)

# Analysis Data
unique(testing_data$`Etiology Status`)
```

Given that "Status" and "Etiology Status" refer to laboratory confirmations, we will filter our case definitions to be only laboratory-confirmed pathogens.

# Cleaning

Based on the data inspections completed above, we want to remove "Ingredient" and "Serotype/Genotype" from the training dataset (> 80% data missing), and we want to remove all variables unrelated to foodborne illness for the analysis dataset (ex: animal type, water type, etc.) in addition to columns with many NAs.

## Training Data
```{r}
training_data_fin <- training_data %>%
  select(!c(Ingredient, `Serotype/Genotype`)) %>%
  filter(grepl("Confirmed", Status))
```
# Data Manipulation
## Training Data
### Cleaning the "Species" Column
```{r}
unique(training_data_fin$Species)
# Separate the rows for coninfections
training_data_fin=training_data_fin%>%
  separate_rows(Species,sep=";")
# Create lists for pathogen types
Pathogen_Bacteria <- c("Bacillus", "Brucella", "Campylobacter", "Clostridium", "Staphylococcus", "Escherichia", "Listeria", "Salmonella", "Vibrio", "Cholera", "Enterococcus", "Bacterium", "Shigella", "Yersinia","Streptococcus")
Pathogen_Parasite <- c("Cryptosporidium", "Cyclospora", "Entamoeba", "Giardia", "Parasite", "Toxoplasma", "Trichinella")
Pathogen_Virus <- c("Astrovirus", "Norovirus", "Rotavirus","Hepatitis","Virus")
Pathogen_Poison <- c("Poison", "Toxin", "Metal","Pesticide","Ciguatoxin","Scombroidtoxin")
# simplify "Escherichia coli, Shiga toxin-producing" to "Escherichia coli"
# Create two new columns: Pathogen_type & Simplified_Etiology
training_data_fin=training_data_fin%>%
  mutate(Pathogen_Type = case_when(
    grepl(paste(Pathogen_Virus,
                collapse="|"), Species,ignore.case = TRUE) ~ "Virus",
    grepl(paste(Pathogen_Bacteria, 
                collapse = "|"), Species,ignore.case = TRUE) ~ "Bacteria",
    grepl(paste(Pathogen_Parasite, 
                collapse = "|"), Species,ignore.case = TRUE) ~ "Parasite",
    grepl(paste(Pathogen_Poison, 
                collapse = "|"), Species,ignore.case = TRUE) ~ "Poison"
    )) %>%
  mutate(Simplified_Etiology = word(Species,1))%>%
      mutate(Simplified_Etiology = case_when(
        Simplified_Etiology == "Escherichia" ~ "E. coli",
        Simplified_Etiology == "Heavy" ~ "Heavy Metals",
        TRUE ~ Simplified_Etiology))
```

### Column for Location
```{r}
# Checking Location Names and Separate Multiple Names
unique(training_data_fin$Location)
training_data_fin=training_data_fin %>%
 separate_rows(Location,sep="; ")
```

The variable for location appears to be clean now.

### Add Month as Numeric Column
```{r}
training_data_fin <- training_data_fin %>%
  mutate(Numeric_Month = case_when(
    Month == "January" ~ 1,
    Month == "February" ~ 2,
    Month == "March" ~ 3,
    Month == "April" ~ 4,
    Month == "May" ~ 5,
    Month == "June" ~ 6,
    Month == "July" ~ 7,
    Month == "August" ~ 8,
    Month == "September" ~ 9,
    Month == "October" ~ 10,
    Month == "November" ~ 11,
    Month == "December" ~ 12)) %>%
  relocate(Numeric_Month, .after = Month)
```

### Make IFSAC Category Column for Training Data

Everything else not included in vectors will be categorized as "Other".

```{r}
# unique(analysis_data_fin$`IFSAC Category`)
# unique(training_data_fin$Food)
Desserts=c("Cookie","Cream","Canoli","Cake","Pudding")
Beef=c("Beef","Steak")
Poultry=c("Chicken","Turkey")
Pork=c("Pork","Sausage","Hot Dog","Deli","Spam","Strawberries","Blueberries","Pig","Ribs")
Dairy=c("Milk","Cheese","Parsley")
Crusteaceans=c("Lobster","Crab","Shrimp")
Fish=c("Fish","Tuna","Salmon")
Mollusks=c("Clams","Oysters")
Fruits=c("Tomato","Banana","Melon","Grapes","Mango")
`Grains-Beans`=c("Rice","Peas","Beans","wheat")
`Vegetable-Row-Crops`=c("Lettuce","artichokes","broccoli","asparagus","celeries","spinach")
`Root-underground-vegetables`=c("Roots","carrots","Beets","Onion","Tubers","yams","Garlic","Potatos","taro")
Sprouts=c("alfalfa","mung")
Salad=c("Salad")
# Other=c("Ice","Alcohol","Eggnog")
Game=c("Bear")
Herbs=c("basil","cilantro")
Fungi=c("Mushroom","portabellas")
`Nuts-Seeds`=c("peanuts","almonds","Seasames")
Eggs=c("Egg")
`Seeded-Vegetables`=c("Peppers","Squashes","Cucumbers","Okras","Corn")
`other meat`=c("Lamb")

training_data_fin <- training_data_fin %>%
  mutate(`IFSAC Category` = case_when(
    grepl("Salad",Food, ignore.case = TRUE) ~ "Salad",
    grepl(paste(Desserts, 
                collapse = "|"), Food,ignore.case = TRUE) ~ "Dessert",
    grepl(paste(Poultry,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Poultry",
    grepl(paste(Beef,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Beef",
    grepl(paste(Pork,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Pork",
    grepl(paste(Dairy,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Dairy",
    grepl(paste(Crusteaceans,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Crusteaceans",
    grepl(paste(Fish,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Fish",
    grepl(paste(Mollusks,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Mollusks",
    grepl(paste(Fruits,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Fruits",
    grepl(paste(`Grains-Beans`,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Grains-Beans",
    grepl(paste(`Vegetable-Row-Crops`,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Vegetable-Row-Crops",
    grepl(paste(`Root-underground-vegetables`,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Root-underground-vegetables",
    grepl(paste(Sprouts,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Sprouts",
    
    grepl(paste(Herbs,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Herbs",
    grepl(paste(Fungi,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Fungi",
    grepl(paste(`Nuts-Seeds`,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Nuts-Seeds",
    grepl(paste(`Seeded-Vegetables`,
                collapse = "|"), Food, ignore.case = TRUE) ~ "Seeded-Vegetables",
    grepl("eggs",Food,ignore.case = TRUE)~"Eggs",
    grepl("Lamb",Food)~"Other Meat",
    TRUE ~ if_else(is.na(Food),"","Other")
   ))%>%
  mutate(`IFSAC Category` = na_if(`IFSAC Category`, ""))%>%
  relocate(`IFSAC Category`, .after = Food)
training_data_fin=training_data_fin%>%
  mutate(`IFSAC Category`=case_when(
    grepl(";",Food)~"Multiple",TRUE~`IFSAC Category`))
```

## Analysis Data
```{r}
testing_data_fin <- testing_data %>%
  select(!c(`Animal Type`, `Animal Type Specify`, 
            `Water Exposure`, `Water Type`, `Water Status`, 
            `Food Contaminated Ingredient`)) %>%
  filter(grepl("Confirmed", `Etiology Status`)) %>%
  filter(`Primary Mode` == "Food")
```

### Separate Rows to Address Coinfections
```{r}
testing_data_fin <- testing_data_fin %>%
  separate_rows(Etiology, sep = "; ")
```

### Modifying IFSAC Category to Include Salads
```{r}
Desserts <- c("cookies", "cake", "chocolate", "brownie")

testing_data_fin <- testing_data_fin %>%
  mutate(`IFSAC Category` = case_when(
    grepl("Salad", `Food Vehicle`, ignore.case = TRUE) ~ "Salad",
    grepl(paste(Desserts, 
                collapse = "|"), `Food Vehicle`) ~ "Dessert",
    grepl("Chicken", `Food Vehicle`, ignore.case = TRUE) ~ "Poultry",
    grepl("Turkey", `Food Vehicle`, ignore.case = TRUE) ~ "Poultry",
    grepl("Poultry", `Food Vehicle`, ignore.case = TRUE) ~ "Poultry",
    TRUE ~ `IFSAC Category`))
```

### Column for Type of Pathogen
```{r}

testing_data_fin <- testing_data_fin %>%
  mutate(Pathogen_Type = case_when(
    grepl(paste(Pathogen_Poison, 
                collapse = "|"), Etiology) ~ "Poison",
    grepl(paste(Pathogen_Bacteria, 
                collapse = "|"), Etiology) ~ "Bacteria",
    grepl(paste(Pathogen_Parasite, 
                collapse = "|"), Etiology) ~ "Parasite",
    grepl(paste(Pathogen_Virus, 
                collapse = "|"), Etiology) ~ "Virus"
    )) %>%
  mutate(Simplified_Etiology = word(Etiology,1)) %>%
      mutate(Simplified_Etiology = case_when(
        Simplified_Etiology == "Escherichia" ~ "E. coli",
        Simplified_Etiology == "Heavy" ~ "Heavy Metals",
        TRUE ~ Simplified_Etiology))
```
###Column for Location
```{r}
testing_data_fin <- analysis_data_fin %>%
  rename(Location=Setting)%>%
  mutate(Location=case_when(
    grepl("Restaurant",Location)~"Restaurant",TRUE~Location))%>%
    separate_rows(Location,sep="; ")
testing_data_fin
```

# Drop Rows Containing NA
```{r}
training_data_final=training_data_fin%>%
  drop_na()
testing_data_final=testing_data_fin%>%
  drop_na()

```

## Check Data Structure Again
```{r}
skim(training_data_final)
skim(testing_data_final)
```

# Save Data 

The cleaned datasets will be saved as RDS files. 

```{r}
# Label Final Datasets as Cleaned/Processed
processed_training_data <- training_data_final
processed_testing_data <- testing_data_final

# Save Data
save_data_location1 <- here::here("data","processed_data","processed_training_data.rds")
saveRDS(processed_training_data, file = save_data_location1)

save_data_location2=here::here("data","processed_data","processed_testing_data.rds")
saveRDS(processed_testing_data, file = save_data_location2)

```

